#! ../venv/bin/python3
from crypt import crypt
from distutils import extension
from importlib.resources import path
from pkgutil import extend_path

from banner.banner_ import logo
from args.args import ft_args
from clear.clear import clear
import sys, time, os, getpass, argparse, pyAesCrypt,  random, string



class stockholm(object):
    # Constructor

    def __init__(self): # Constructor of the class (self is the object itself)
        self.clear() # Clear the terminal
        self.slowprint(logo) # Print the banner
        self.args = ft_args()
        self.path_files()   # Get the path of the files to be encrypted or decrypted

    def clear(self):
        clear()

    def keygen(self):
        s = input("Quiere generar una clave automaticamente ? (s/n): ")
        if (s == "s" or s == "S"):
            key = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(42)) # Generate a random key of 16 characters long
            self.key = key
        elif (s == "n" or s == "N"):
            key = self.key_load()
        else:
            self.clear()
           # self.slowprint(logo)
            print("\n ingresa una opción válida!! \n")
            self.keygen()
        return self.key

    def key_load(self):
        key = getpass.getpass("\nLa clave debe tener 16 caracteres o más:  ") # Get the key from the user and save it in a variable
        if len(key) < 16:
            self.clear()
            print("\n ingresa una clave válida!! >= a 16 caracteres: \n")
            self.key_load() # Recursive call to the function esto es recursividad lol xd
        self.key = key
        return self.key

    def slowprint(self, n):
        for word in n + '\n':
            sys.stdout.write(word)
            sys.stdout.flush()
            time.sleep(0.0033)

    def print_key(self):
        a = input("\nQuieres ver la clave ? (s/n): ")
        if (a == "s" or a == "S"):
            print("\nLa clave es: " + self.key + "\n")
        elif (a == "n" or a == "N"):
            pass
        else:
            self.clear()
            print("\n ingresa una opción válida!! \n")
            self.print_key()

    def key_save(self):
        s = input("\nQuiere guardar la clave en un archivo? (s/n): ")
        if (s == "s" or s == "S"):
            f = open(".key.txt", "w")
            f.write(self.key)
            f.close()
            path =  os.path.join(os.path.dirname(__file__), ".key.txt")
            self.clear()
           # self.slowprint(logo)
            self.slowprint("\nla ruta absoluta de la clave es: " + path)
            self.slowprint("\nKey saved successfully \n")
        elif (s == "n" or s == "N"):
            self.slowprint("\nKey not saved \n")
            time.sleep(0.0021)
        else:
            self.clear()
            print("\n ingresa una opción válida!! \n")
            self.key_save() # Recursive call to the function esto es recursividad lol xd
        #time.sleep(0.019) # Wait 0.019 seconds to continue
        #self.clear() # Clear the terminal

    def encrypt_files(self):
        buffer_size = 256 * 1024 # Buffer size of 256KB
        # si lo archivos ya estan  tiene que salitar un error xd
        if any(file.endswith(".ft") for file in os.listdir(os.path.expanduser("~" + '/infection'))):
           self.slowprint("\nNo se puede encriptar un archivo que ya este encriptado \n")
           exit()
        else:
            key = self.keygen() # Generate the key
        for path, curerentDirectory, files in os.walk(os.path.expanduser("~" + '/infection')): # Loop through the files in the directory
            # chay que comprobar que los archivos no tengan la extension .ft
            if not any(file.endswith(".ft") for file in files):
                for file in files:
                    pyAesCrypt.encryptFile(os.path.join(path, file), os.path.join(path, file + '.ft'), key,       buffer_size) # Encrypt the file
                    os.remove(os.path.join(path, file)) # Delete the original file
            else:
                self.slowprint("\nNo se puede encriptar un archivo ya encriptado \n")
                time.sleep(0.0021)
        if self.args.silent == False :
            if not any(file.endswith(".ft") for file in files):
                for file in files:
                    print("\nEncriptando: " + os.path.join(path, file + '.ft'), end='\n') # Print the name of the encrypted file

           #print ("\nno se como hacer esto xd lol xdda pero sabre que hacer xd")


    def decrypt_files(self):
        buffer_size = 256 * 1024
        key = getpass.getpass("Ingresa la clave: ")
        for path, currentDirectory, files in os.walk(os.path.expanduser("~" + '/infection')): # Loop through the files in the directory
            try:
                for file in files:
                        if file.endswith(".ft"):
                            pyAesCrypt.decryptFile(os.path.join(path, file), os.path.join(path, file[:-3]), key, buffer_size) # Decrypt the file
                            os.remove(os.path.join(path, file)) # Delete the original file
                        else:
                            print("\nNo se puede desencriptar un archivo no encriptado \n")
                            exit()
            except ValueError:
                self.clear()
                self.slowprint("\nClave incorrecta \n")
                self.decrypt_files()
        if self.args.silent == False : # hay un problema con el silent xd si no se puede decodificar el archivo sige enseñando el mensaje de desencriptado
            if any(file.endswith(".ft") for file in files):
                for file in files:
                    print("\nDesencriptando: " + os.path.join(path, file[:-3]), end='\n') # Print the name of the decrypted file
            else:
                self.slowprint("\nNo se puede desencriptar un archivo que no este encriptado \n")
                time.sleep(0.0021)

    def path_files(self):
        if os.path.isdir(os.path.expanduser('~') + "/infection") == True:
            if self.args.reverse == True:
              self.decrypt_files()
            else:
              self.encrypt_files()
        else:
            print('No existe el directorio:', os.path.expanduser("~")+'/infection\n')
            print('Creamos el directorio\n')
            os.mkdir(os.path.expanduser("~")+'/infection')
            print('Directorio creado\n')
            self.path_files() # Recursive call to the function esto es recursividad lol xd
            #return self.path


########################################################################################################################
stockholm = stockholm()

def main():
    if stockholm.args.reverse == False:
        stockholm.print_key()
        stockholm.key_save()



if __name__ == "__main__":
    main()

































































